### OPVideo

____
#### Сервис состоит из:
#####     1 сервис который осуществляет поиск видео
#####     2 сервис который предоставляет доступ к видео
#####     3 сервис который удаляет устаревшие видео файлы
#####     база данных
#####     клиент
____

#### Архитектура сервиса
```
  база данных
      │          ╔══════════════════════╗
      │  Сервис который осуществляет поиск видео        
      ├┄┄┄┄┄┄┄┄┄┄┄┄ docker service - 1 ┄┄┄┄┄┄┄┄┄ http ┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄ http ┄┄┄┄ ... n
      │          ╚══════════════════════╝         │                                           │
      │          ╔══════════════════════╗         │          ╔══════════════════════╗         │
      │  Сервер хранения видео файлов площадка 1  │  Сервер хранения видео файлов площадка 2  │
      │          ║  docker service - 2 ┄┄┄┄┄┄┄┄┄┄┄┘          ║  docker service - 2 ┄┄┄┄┄┄┄┄┄┄┄┘    
      ├┄┄┄┄┄┄┄┄┄┄┄┄ docker service - 3 ┄┄┄┄┄┄┄┄┄ sql ┄┄┄┄┄┄┄┄┄┄ docker service - 3 ┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄ ... n
      │          ╚═════════════ | ══════╝         │          ╚═════════════ │ ══════╝
   sql│                         |rsync            │                         │rsync
      ├┄┄┄┄┄┄ РМ1(клиент) ┄┄┄┄┄┄┤                 ├┄┄┄┄┄┄ РМ1(клиент) ┄┄┄┄┄┄┤
      ├┄┄┄┄┄┄ РМ2(клиент) ┄┄┄┄┄┄┤                 ├┄┄┄┄┄┄ РМ2(клиент) ┄┄┄┄┄┄┤
      ├┄┄┄┄┄┄ РМ3(клиент) ┄┄┄┄┄┄┤                 ├┄┄┄┄┄┄ РМ3(клиент) ┄┄┄┄┄┄┤
      │       ...               │                 │       ...               │
      └┄┄┄┄┄┄ РМn(клиент) ┄┄┄┄┄┄┘                 └┄┄┄┄┄┄ РМn(клиент) ┄┄┄┄┄┄┘
```
Сервисы deploy-ются с помощью CI/CD (описано в файле .gitlab-ci.yml текущего проекта) и запускается контейнером в рое docker (описано в файле docker-compose.yml текущего проекта)
____

### {   1 Сервис который осуществляет поиск видео   }

Место расположения не влияет на работу главное чтобы был доступ к остальным ресурсам opvideo.
В данный момент доступен по адресу http://opvideo.app.grancall.ru

Краткое описание работы:

  Для входа в сервис нужно использовать данные для авторизации AD, проверка и данные для подключения к AD описана в файле 

  opvideo/flask_web_find_video/src/start.py #LDAP params

  Данные для подключения к БД описаны в том же файле #MySQL params

  Поиск видео записи осуществляется по sessionid.

  Сервис подключается к БД и ищет указанный sessionid в базе, найдя все файлы описанные в БД он создает ссылку на сервер где 

  хранится видео по которой можно просмотреть запись.


Имя службы в рое opvideo_web файл docker-compose.yml

Описания сборки образа можно посмотреть тут opvideo / flask_web_find_video / Dockerfile
____

### {   2 Сервис который предоставляет доступ к видео   }

Это обычный nginx с минимальными настройками который транслирует видео записи по абсолютным ссылкам.
Место расположения: deploy-ется на сервер хранения видео для каждой площадки отдельно,
доступ индивидуальный и используется только сервисом который осуществляет поиск видео.

Имена служб в рое opvideo_nginx_<площадка> файл docker-compose.yml
Описания сборки образа можно посмотреть тут opvideo / nginx / Dockerfile
____

### {   3 Сервис который удаляет устаревшие видео файлы   }

Это скрипт который запускается в контейнере и удаляет видео файлы если они старше установленного срока, а также записывает 
дату удаления в БД
Место расположения: deploy-ется на сервер хранения видео для каждой площадки отдельно, доступа нету, работает с файлами и БД.

Имена служб в рое opvideo_rm_<площадка> файл docker-compose.yml
Описания сборки образа можно посмотреть тут opvideo / rm_video_for_storage / Dockerfile
____

### {                   База данных                     }

База данных с двумя таблицами:

CONFIG - эта таблица в которой хранится информация для перемещения видео файлов с РМ на сервер хранения и поиска видео файлов.
________
```
id - ключевое поле используется для связи таблиц
ZONE - название площадки по этому полю клиент определяет какие настройки брать для какой площадки
SERVER - имя сервера хранения видео файлов
USER - имя пользователя для подключения к серверу хранения видео файлов
RSA_KEY - rsa ключ для подключения к серверу хранения видео файлов
SPEED - скорость синхронизации видео файлов с РМ ОП на сервер хранения видео файлов задается в Кбайтах
PATH_SRC - каталог на РМ ОП из который будет синхронизироваться видео файлы
PATH_DST - каталог на сервере хранения видео файлов куда будут синхронизироваться видео файлы
TYPE_VIDEOFILE - расширение файлов для синхронизации по этому параметру идет поиск файлов для добавления в БД
PUBLIC_ADDRESS - здесь указываем имя сервера через который будет предоставляться доступ к видео файлам 
                 это имя хоста где у нас запускается сервис который предоставляет доступ к видео (nginx)
PUBLIC_PORT - здесь указываем порт сервера через который будет предоставляться доступ к видео файлам 
              где у нас запускается сервис который предоставляет доступ к видео (nginx)
```

Для создания:
```sql
CREATE TABLE `CONFIG` (
  `id` int(10) NOT NULL AUTO_INCREMENT,
  `ZONE` varchar(20) NOT NULL,
  `SERVER` varchar(50) NOT NULL,
  `USER` varchar(10) NOT NULL,
  `RSA_KEY` text NOT NULL,
  `SPEED` varchar(5) NOT NULL,
  `PATH_SRC` varchar(50) NOT NULL,
  `PATH_DST` varchar(50) NOT NULL,
  `TYPE_VIDEOFILE` varchar(5) NOT NULL,
  `PUBLIC_ADDRESS` varchar(50) DEFAULT NULL,
  `PUBLIC_PORT` varchar(5) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=50 DEFAULT CHARSET=utf8
```

VIDEO - эта таблица используется для хранения данных о видео файлах.
________
```
ZONE_ID - связь с CONFIG.id служит для определения на каком сервере хранения видео файлов располагается файл с видео
PROJECTID - полностью соответствует PROJECTID в БД naumen
SESSIONID - полностью соответствует SESSIONID в БД naumen
FILE_NAME - полное имя файла созданное при записи видео
RECORDING_DATE - дата записи видео файла 
DELETE_DATE - дата удаления видео файла 
STORAGE_DAYS - количество дней хранения видео файла 
```

Для создания:
```sql
CREATE TABLE `VIDEO` (
  `ZONE_ID` int(10) NOT NULL,
  `PROJECTID` varchar(40) DEFAULT NULL,
  `SESSIONID` varchar(50) NOT NULL,
  `FILE_NAME` varchar(100) NOT NULL,
  `RECORDING_DATE` date NOT NULL,
  `DELETE_DATE` date DEFAULT NULL,
  `STORAGE_DAYS` varchar(3) DEFAULT NULL,
  KEY `VIDEO_FK` (`ZONE_ID`),
  CONSTRAINT `VIDEO_FK` FOREIGN KEY (`ZONE_ID`) REFERENCES `CONFIG` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8
```
____

### {                     Клиент                      }

Клиент синхронизирует видео файлы с РМ ОП на сервер хранения видео файлов своей площадки (например kursk, значит видео 

хранится на площадке Курска) и добавляет информацию о файлах в БД

Клиент можно установить через ansible http://ans.dc.grancall.ru роль называется opvideo_client

Так же клиент можно установить через ansible склонировав мой личный проект с gitlab https://gitlab.grancall.ru/configs/kursk/ansible роль называется так же opvideo_client

Для установки нечего не надо конфигурировать под разные площадки, клиент сам определяет на какой он площадке, это  обеспечивается resolv-ом имени docker1 так как запись в DNS о этом хосте есть под все площадки оно определяется как docker1.< zone >.grancall.ru это упомянуто для понимания из за чего могут быть проблемы и далее клиент смотрит настройки для конкретной zone.

Настойка для подключения к БД находится тут opvideo_client/templates/db.conf для изменения можно так же использовать 
ansible, изменения для http://ans.dc.grancall.ru можно внести тут https://gitlab.grancall.ru/ansible/desktops

Клиент работает как служба в системе
##### service opvideo status/stop/start/restart

Логи:
/var/log/op_rsync.log - лог (вывод ошибок ssh и rsync) в которые пишутся ошибки при синхронизации видео файлов и при подключению к серверу хранения видео
/var/log/videos_error.log - лог в который пишутся ошибки при работе скрипта

Клиент делает синхронизацию только в том случаи если есть файлы для добавления и они были добавлены в БД, синхронизация 
делается с интервалом в 1 час, после успешной синхронизации файл сразу можно найти в http://opvideo.app.grancall.ru


------------------------------------------------------------------------------------------------------------------------------

### {           Сервер хранения видео файлов           }

Если deploy служб происходит с помощью Gitlab CI/CD то для синхронизации с помощью rsync сервер хранения видео файлов надо 
подготовить, далее описание что для этого надо сделать, так же установлен сам rsync.

Для работы rsync осуществляем следующие действия

1) Создаем пользователя
##### adduser <имя пользователя>

2) Создаем папку для ssh
##### mkdir /home/<имя пользователя>/.ssh

3) Создаем ключ rsa
##### ssh-keygen
при создании спрашивает путь, указываем /home/<имя пользователя>/.ssh/id_rsa

4) Проверяем как прописан наш файл ключа у ssh сервера
##### cat /etc/ssh/sshd_config | grep -i AuthorizedKeysFile

5) Переименовываем публичный ключ на тот который указан в ssh сервере, если требуется

6) Назначение правильного владельца и группы на файлы
##### chown -R <имя пользователя>:<название группы> /home/<имя пользователя>/.ssh

7) Делаем правильные права на каталог
##### chmod 700 /home/<имя пользователя>/.ssh

8) Создаем каталог куда будут складываться видео файлы

9) Правим права на каталог
##### chown -R <имя пользователя>:<название группы> <путь к каталогу>

Проверка подключения с помощью ключа
1) Копируем секретный ключ
2) Права на ключ должны быть только у текущего пользователя это маска 600
3) Пробуем подключится
##### ssh -i <путь к ключу> <имя пользователя>@<хост к которому подключаемся>

Убедившись в том что все работает
информацию надо добавить в БД

Пример
```sql 
INSERT INTO CONFIG
SET  ZONE = 'zone-test',
          SERVER = 'docker5.zone-test.grancall.ru',
          USER = '<имя пользователя>',
          RSA_KEY = '< rsa secret key >',
          SPEED = 3000,
          PATH_SRC = '/home/oper/.videos/',
          PATH_DST = 'путь к каталогу на сервере куда будут складываться видео>',
          TYPE_VIDEOFILE = 'mp4',
          PUBLIC_ADDRESS = 'docker5.zone-test.grancall.ru',
          PUBLIC_PORT = 88;
```
